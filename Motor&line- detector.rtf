{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import RPi.GPIO as GPIO\
import time\
GPIO.setmode(GPIO.BCM)\
\
#Motor 1 pin variables and setup\
x1 = 2  #pin 2\
x2 = 3  #pin 3\
x3 = 4  #pin 4\
GPIO.setup(x1,GPIO.OUT) #Input 1\
GPIO.setup(x2,GPIO.OUT) #Input 2\
GPIO.setup(x3,GPIO.OUT) #Enable 1,2\
\
#PWM setup for motor 1, 50 is frequency\
m1P = GPIO.PWM(x1,50)  #Motor 1 forward direction speed control\
m1N = GPIO.PWM(x2,50) #Motor 1 reverse direction speed control\
\
#Motor 2 pin variables and setup\
y1 = 2  #pin 17\
y2 = 3  #pin 22\
y3 = 4  #pin 27\
\
#PWM setup for motor 2\
m2P = GPIO.PWM(y1,50)  #Motor 2 forward direction speed control\
m2N = GPIO.PWM(y2,50) #Motor 2 reverse direction speed control\
\
#Sensor define and variables\
laser1 = 18\
laser1 = 23\
laser1 = 24\
laser1 = 25\
sensors = \{\'92sen1\'92: False, \'91sen2\'92: False, \'91sen3\'92: False, \'91sen4\'92 = False\}\
\
#Control the speed, direction and rotation of the motor by passing values and variables\
def nav (mode1, mode2, dc1, dc2):\
	mode1.ChangeDutyCycle(dc1)\
	mode2.ChangeDutyCycle(dc2)\
	time.sleep(0.01)\
	\
#Backup in t seconds, use for break also \
def B_brake(t):\
	counter = 0\
	while counter != t:\
		time.sleep(1)\
		counter += 1\
		nav(m1N, m2N, 100, 100) #Moving backward\
\
#Forward in t seconds\
def Forward(t):\
	counter = 0\
	while counter != t:\
		time.sleep(1)\
		counter += 1\
		nav(m1P, m2P, 100, 100) #Moving backward\
\
\
#Rotate clockwise with time t\
def Rotate_clockwise(t):\
	counter = 0\
	while counter != t:\
		time.sleep(1)\
		counter += 1\
		nav(m1P, m2N, 100, 100) #Rotate\
\
#Rotate anti-clockwise with time t\
def Rotate_anti_clockwise(t):\
	counter = 0\
	while counter != t:\
		time.sleep(1)\
		counter += 1\
		nav(m1N, m2P, 100, 100) #Rotate\
\
#White line detector\
def LineDetector():\
	if not GPIO.input(laser1):\
		sensors[\'91sen1\'92] = True\
	if not GPIO.input(laser2):\
		sensors[\'91sen2\'92] = True\
	if not GPIO.input(laser3):\
		sensors[\'91sen3\'92] = True\
	if not GPIO.input(laser4):\
		sensors[\'91sen4\'92] = True\
\
#White line detector scenario \
def cases():\
	if sensors[\'91sen1\'92] = True\
\
#White Line Detection and Motor Control Algorithm\
while 1:\
	sensors = LineDetector() #Sensors activate\
	if sensors[\'91sen1\'92] == True or sensors[\'91sen2\'92] == True:\
		#Back up and rotate clockwise to scan enemy\
		#Motor1 is on the left and motor2 is on the right\
		B_brake(3) #Brake and Backup \
		nav(m1P, m2N, 100, 100) #Rotate ro scan enemy\
	elif sensors[\'91sen3\'92] == True or sensors[\'91sen4\'92] == True:\
		nav(m1P, m2P, 100, 100) #Move Forward\
	elif sensors[\'91sen1\'92] == True or sensors[\'91sen3\'92] == True:\
		Rotate_clockwise(2)\
		Forward(2)\
		nav(m1P, m2N, 100, 100) #Rotate to scan enemy\
	elif sensors[\'91sen2\'92] == True or sensors[\'91sen4\'92] == True:\
		Rotate_anti_clockwise(2)\
		Forward(2)\
		nav(m1P, m2N, 100, 100) #Rotate to scan enemy\
		\
		\
		\
		\
		\
	\
\
\
}